@page "/"

@using DataLibrary
@using DataLibrary.Models

@inject IPatientDAL _db

<h2 style="font-weight:bold">Dashboard</h2>
<br/>

<div class="card-deck">
    <div class="card">
        <div class="card-body d-flex flex-column">
            <h1 class="card-title" style="color:darkblue;font-size:150px;text-align:center">@stats.patientCount</h1>
            <p class="card-text mt-auto" style="font-weight: bold;text-align:center">Total Unique Patients</p>
        </div>
    </div>
    <div class="card">
        <div class="card-body d-flex flex-column">
            <h1 class="card-title" style="color:rebeccapurple;font-size:150px;text-align:center">@stats.patientWithDuesCount</h1>
            <p class="card-text mt-auto" style="font-weight: bold;text-align:center">Patients with Dues</p>
        </div>
    </div>
    <div class="card">
        <div class="card-body d-flex flex-column">
            <div class="card-title" style="color:orangered;text-align:center">
                @foreach (string s in stats.topPatientsWithDues)
                {
                    <p><b>@s</b></p>
                }
            </div>
            <p class="card-text mt-auto" style="font-weight: bold;text-align:center">Top 5 patients with Dues</p>
        </div>
    </div>
    <div class="card">
        <div class="card-body d-flex flex-column">
            <h1 class="card-title" style="color:red;font-size:5vw;text-align:center">@("₹ " + stats.totalDueAmount)</h1>
            <p class="card-text mt-auto" style="font-weight: bold;text-align:center">Total Dues</p>
        </div>
    </div>
</div>

@code {

    List<PatientModel> patients;

    public class Statistics
    {
        public int patientCount;
        public int patientWithDuesCount;
        public string[] topPatientsWithDues;
        public int totalDueAmount;
    }

    Statistics stats;

    protected override async Task OnInitializedAsync()
    {
        patients = await _db.GetPatients();

        stats = new Statistics();
        stats.patientCount = patients.Count;
        stats.patientWithDuesCount = patients.Count(r => r.Due > 0);
        stats.topPatientsWithDues = patients.Where(r => r.Due > 0).OrderByDescending(r => r.Due).Take(5).Select(r => (string.Join(", ", r.OPDNumber, r.FirstName + " " + r.LastName, "₹ " + r.Due))).ToArray();
        stats.totalDueAmount = patients.Where(r => r.Due > 0).Sum(r => r.Due);
    }
}